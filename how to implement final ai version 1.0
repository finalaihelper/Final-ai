# Final AI 1.0: Comprehensive Chatbot with Multi-AI Integration

## Overview

Final AI 1.0 is a robust chatbot designed to provide intelligent responses using multiple AI models. It features advanced user personalization, continuous dataset expansion, sophisticated feedback analysis, and integrations with popular AI services like OpenAI and IBM Watson.

## Features

- **Multi-AI Integration**: Uses multiple AI services for answering questions.
- **User Authentication**: Secure login and registration system.
- **Personalization**: Remembers user preferences and interaction histories.
- **Continuous Learning**: Expands the dataset with new questions and responses.
- **Feedback Analysis**: Analyzes user feedback to optimize responses.
- **Web Interface**: User-friendly web interface built with Flask.

---

## Step-by-Step Guide to Building Final AI 1.0

### Step 1: Set Up Your Environment

1. **Install Python**: Ensure Python is installed on your machine. Download it from [python.org](https://www.python.org/downloads/).

2. **Install Required Libraries**: Open your terminal and run:
   ```bash
   pip install flask sklearn textblob gtts wikipedia-api bcrypt pillow cryptography numpy pandas matplotlib openai ibm-watson
   ```

3. **Create a Project Folder**: Set up a folder for your project, e.g., `FinalAIProject`.

### Step 2: Create Basic Files

1. **Create Python File**: Inside your project folder, create a file named `final_ai.py`.

2. **Create Templates Folder**: Create a folder named `templates` in your project folder.

3. **Create HTML Files**: Inside the `templates` folder, create two files named `index.html` and `login.html`.

4. **Create a Data File**: Create a text file named `chatbot_data.txt` for storing chatbot responses.

5. **Create a User Data File**: Create a text file named `user_data.txt` for storing usernames and hashed passwords.

### Step 3: Write the Code for Final AI 1.0

Here's the complete code for the chatbot, integrating various features and AI services:

```python
import os
import random
import sqlite3
import bcrypt
from flask import Flask, request, render_template, redirect, url_for, session, flash
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
import pandas as pd
import openai
from ibm_watson import AssistantV2
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator

# Initialize Flask app
app = Flask(__name__)
app.secret_key = os.urandom(24)

# Initialize SQLite database
def init_db():
    conn = sqlite3.connect('chatbot.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS feedback (
                        id INTEGER PRIMARY KEY,
                        user_input TEXT,
                        response TEXT,
                        rating INTEGER)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS user_preferences (
                        id INTEGER PRIMARY KEY,
                        user_name TEXT,
                        preferences TEXT)''')
    conn.commit()
    return conn

# Load data from a text file
def load_data_from_file(filename):
    try:
        with open(filename, 'r') as file:
            lines = file.readlines()
        return [tuple(line.strip().split('|')) for line in lines if line.strip()]
    except Exception as e:
        print(f"Error loading data: {e}")
        return []

# Save user credentials
def save_user_credentials(username, password):
    try:
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
        with open('user_data.txt', 'a') as file:
            file.write(f"{username}:{hashed_password.decode('utf-8')}\n")
    except Exception as e:
        print(f"Error saving user credentials: {e}")

# Prepare training data
def prepare_training_data(data):
    texts, labels = zip(*data)
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(texts)
    return X, labels, vectorizer

# OpenAI response function
def get_openai_response(prompt):
    openai.api_key = 'YOUR_OPENAI_API_KEY'
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}]
    )
    return response['choices'][0]['message']['content']

# IBM Watson response function
def get_watson_response(prompt):
    authenticator = IAMAuthenticator('YOUR_IBM_API_KEY')
    assistant = AssistantV2(
        version='2021-06-14',
        authenticator=authenticator
    )
    assistant.set_service_url('YOUR_SERVICE_URL')
    
    response = assistant.message(
        assistant_id='YOUR_ASSISTANT_ID',
        session_id='YOUR_SESSION_ID',
        input={'message_type': 'text', 'text': prompt}
    ).get_result()
    
    return response['output']['generic'][0]['text']

# Main response function
def respond(user_input, model, vectorizer, data):
    user_input_vector = vectorizer.transform([user_input])
    prediction = model.predict(user_input_vector)[0]
    responses = [r for (q, r) in data if q in user_input]
    
    if responses:
        return random.choice(responses)
    
    # Fallback to other AI services
    try:
        return get_openai_response(user_input)
    except Exception as e:
        print(f"OpenAI error: {e}")

    try:
        return get_watson_response(user_input)
    except Exception as e:
        print(f"Watson error: {e}")

    return "I'm not sure how to respond to that."

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        with open('user_data.txt', 'r') as file:
            for line in file:
                stored_username, stored_password = line.strip().split(':')
                if username == stored_username and bcrypt.checkpw(password.encode('utf-8'), stored_password.encode('utf-8')):
                    session['username'] = username
                    return redirect(url_for('chat'))
            flash("Invalid username or password.")
    return render_template('login.html')

@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.form['user_input']
    response = respond(user_input, model, vectorizer, data)
    rating = request.form.get('rating')  # Assume a rating input in the form
    if rating:
        cursor = conn.cursor()
        cursor.execute('INSERT INTO feedback (user_input, response, rating) VALUES (?, ?, ?)', 
                       (user_input, response, rating))
        conn.commit()
    return response

if __name__ == "__main__":
    conn = init_db()
    data = load_data_from_file('chatbot_data.txt')
    X, y, vectorizer = prepare_training_data(data)
    model = MultinomialNB()
    model.fit(X, y)
    app.run(debug=True)
```

### Step 4: Populate Your Dataset

1. **Expand the Dataset**: Open `chatbot_data.txt` and add new entries. Each line should follow this format:
   ```
   user question|response
   ```
   Example:
   ```
   hi|Hello! How can I help you?
   what's your name?|I am Final AI, here to assist you.
   ```

### Step 5: Implement User Preferences

1. **Store User Preferences**: Extend the chatbot to save user preferences using the `user_preferences` table.

   ```python
   def update_user_preferences(username, preferences):
       cursor = conn.cursor()
       cursor.execute("INSERT OR REPLACE INTO user_preferences (user_name, preferences) VALUES (?, ?)", 
                      (username, preferences))
       conn.commit()
   ```

2. **Load Preferences**: Retrieve and apply user preferences during login.

   ```python
   def load_user_preferences(username):
       cursor = conn.cursor()
       cursor.execute("SELECT preferences FROM user_preferences WHERE user_name=?", (username,))
       return cursor.fetchone()
   ```

### Step 6: Testing the Chatbot

1. **Run the Chatbot**: In the terminal, navigate to your project folder and run:
   ```bash
   python final_ai.py
   ```

2. **Access the Chatbot**: Open a web browser and go to `http://127.0.0.1:5000/`.

3. **Register and Log In**: Use the login page to access the chat interface.

4. **Test Different Scenarios**: Experiment with various questions and evaluate the chatbot's responses.

### Step 7: Future Enhancements

1. **Continuous Dataset Expansion**: Implement a feature for users to suggest new questions and responses.

2. **Advanced Analysis**: Develop methods to analyze feedback over time to identify trends and optimize responses.

3. **Further Personalization Features**: Enhance functionality to remember multiple user preferences and histories.

4. **Explore More AI Services**: Consider integrating additional AI services for broader coverage and capabilities.

### Final Note

Final AI 1.0 is a comprehensive chatbot framework that integrates multiple AI services and offers advanced features for user interaction. By following this guide, you can build a sophisticated chatbot capable of delivering accurate and personalized responses. As you continue to improve and expand its capabilities, you'll create an increasingly valuable tool for users.
